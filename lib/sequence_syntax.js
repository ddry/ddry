// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var SpecData;

  SpecData = require('./spec_data');

  module.exports = {
    parse: function(specSequence, specIndex, specParams) {
      var fixtureValid, message, spec;
      this.messageGenerator = specSequence[specParams.mochaMethod];
      spec = specSequence.data[specIndex - specSequence.from];
      fixtureValid = this.validate(spec);
      if (fixtureValid) {
        specParams = this.parseFixture(spec, specParams);
      } else {
        message = this.messageGenerator(specIndex, spec);
        specParams = this.setSpecData(specParams, [specIndex], spec, message);
      }
      return specParams;
    },
    validate: function(spec) {
      var keys;
      if (typeof spec !== 'object') {
        return false;
      }
      keys = Object.keys(spec);
      if (keys.indexOf('i') === -1) {
        return false;
      }
      if (keys.indexOf('e') === -1) {
        return false;
      }
      return true;
    },
    parseFixture: function(spec, specParams) {
      var expected, expectedAlias, input, inputAlias, key, ref, ref1, value;
      if (Array.isArray(spec.i)) {
        specParams = this.composeSpecMessage(specParams, spec.i, spec.e, spec.i, spec.e);
      } else {
        ref = spec.i;
        for (key in ref) {
          value = ref[key];
          inputAlias = key;
          input = value;
        }
        ref1 = spec.e;
        for (key in ref1) {
          value = ref1[key];
          expectedAlias = key;
          expected = value;
        }
        specParams = this.composeSpecMessage(specParams, input, expected, inputAlias, expectedAlias);
      }
      return specParams;
    },
    composeSpecMessage: function(specParams, input, expected, inputAlias, expectedAlias) {
      var message;
      message = this.messageGenerator(inputAlias, expectedAlias);
      return this.setSpecData(specParams, input, expected, message);
    },
    setSpecData: function(specParams, input, expected, message) {
      var after, before, matcher, mochaMethod;
      mochaMethod = specParams.mochaMethod;
      matcher = specParams.matcher;
      before = specParams.before;
      after = specParams.after;
      return new SpecData(mochaMethod, matcher, input, expected, message, before, after);
    }
  };

}).call(this);
