// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var data, detect, object;

  data = require('./data');

  detect = require('./detect');

  object = require('../../common/object');

  module.exports = {
    mochaMethods: ['xit', 'xspecify', 'it', 'specify'],
    applyMassPending: function(spec, specParams) {
      var paramsMethod, pendingMessage, specMessage, specMethod;
      specMethod = object.match(spec, this.mochaMethods, true);
      specParams.mochaMethod = specMethod;
      paramsMethod = object.match(specParams, this.mochaMethods, true);
      if (!/x/.test(paramsMethod)) {
        return spec;
      }
      specMessage = spec[specMethod];
      delete spec[specMethod];
      pendingMessage = this.getPendingMessage(specParams[paramsMethod]);
      spec[paramsMethod] = this.setSpecMessage(pendingMessage, specMessage);
      spec.mochaMethod = paramsMethod;
      specParams.mochaMethod = paramsMethod;
      return spec;
    },
    collect: function(spec, specSetParams) {
      var ref, specParams;
      if (!detect.single(spec) && !detect.sequence(spec)) {
        specSetParams.sharedSpecKeys = spec;
        return [];
      }
      specParams = {
        matcher: (ref = spec.matcher) != null ? ref : 'default'
      };
      specParams = object.extend(specParams, specSetParams.sharedSpecKeys);
      spec = this.applyMassPending(spec, specParams);
      if (spec.before) {
        specParams.before = spec.before;
      }
      if (spec.after) {
        specParams.after = spec.after;
      }
      return data.process(spec, specParams);
    },
    getPendingMessage: function(message) {
      if (typeof message !== 'string') {
        return 'pending';
      }
      if (!message.length) {
        return 'pending';
      }
      return message;
    },
    messageFunction: function(i, e, pending, spec) {
      return pending + ": " + (spec(i, e));
    },
    setSpecMessage: function(pending, spec) {
      if (typeof spec === 'string') {
        return pending + ": " + spec;
      }
      return this.messageFunction;
    }
  };

}).call(this);
