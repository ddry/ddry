// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var report;

  report = require('./report');

  module.exports = {
    report: report.create,
    format: report.format,
    extend: report.extend,
    construct: function(constructor, args) {
      var F;
      F = function() {
        return constructor.apply(this, args);
      };
      F.prototype = constructor.prototype;
      return new F();
    },
    insertKey: function(lo, key, value) {
      var arrayFollows, cursor, i, j, nextNode, node, ref, target, xPath;
      xPath = key.split('.');
      target = xPath.pop();
      cursor = lo;
      if (xPath.length) {
        for (i = j = 0, ref = xPath.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          node = xPath[i];
          arrayFollows = /^\d+$/.test(xPath[i + 1]);
          nextNode = arrayFollows ? [] : {};
          cursor[node] = cursor[node] || nextNode;
          cursor = cursor[node];
        }
      }
      return this.insertValue(lo, cursor, target, value);
    },
    insertValue: function(lo, cursor, target, value) {
      var node;
      node = cursor[target];
      if (Array.isArray(node)) {
        value = this.toArray(value);
        cursor[target] = node.concat(value);
        return lo;
      }
      if (node && typeof node === 'object') {
        node = this.extend(node, value);
        return lo;
      }
      cursor[target] = value;
      return lo;
    },
    merge: function(lo, hi) {
      var hiReport, key, value;
      hiReport = report.create(hi, true);
      for (key in hiReport) {
        value = hiReport[key];
        lo = this.insertKey(lo, key, value);
      }
      return lo;
    },
    toArray: function(value) {
      if (Array.isArray(value)) {
        return value;
      }
      return [value];
    }
  };

}).call(this);
