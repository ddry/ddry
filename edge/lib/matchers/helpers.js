// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var assert, common;

  assert = require('assert');

  common = require('../common/object');

  module.exports = {
    cleanArray: {
      extra: [],
      missing: []
    },
    balance: function(assertion) {
      var actualArray, expectedArray;
      actualArray = Array.isArray(assertion.actual);
      expectedArray = Array.isArray(assertion.expected);
      if (actualArray === expectedArray) {
        return assertion;
      }
      if (actualArray) {
        return this.makeArray(assertion, 'expected');
      }
      return this.makeArray(assertion, 'actual');
    },
    compare: function(i, e, tapeContext, tapeMessage) {
      var assertion;
      this.tapeContext = tapeContext;
      this.tapeMessage = tapeMessage;
      assertion = {
        actual: common.report(i),
        expected: common.report(e)
      };
      assertion = this.balance(assertion);
      if (!Array.isArray(assertion.actual)) {
        return this.compareValues(assertion);
      }
      return this.compareObjects(assertion);
    },
    compareValues: function(assertion) {
      if (this.tapeContext) {
        this.tapeContext.deepEqual(assertion.actual, assertion.expected, this.tapeMessage);
      } else {
        assert.deepEqual(assertion.actual, assertion.expected);
      }
      return true;
    },
    compareObjects: function(assertion) {
      var assertionReport;
      assertionReport = this.compareUnordered(assertion.actual, assertion.expected);
      if (this.tapeContext) {
        this.tapeContext.deepEqual(assertionReport, this.cleanArray, this.tapeMessage);
      } else {
        assert.deepEqual(assertionReport, this.cleanArray);
      }
      return true;
    },
    compareUnordered: function(i, e) {
      var element, j, k, len, len1, result;
      result = {
        extra: [],
        missing: []
      };
      for (j = 0, len = i.length; j < len; j++) {
        element = i[j];
        if (e.indexOf(element) === -1) {
          result.missing.push(element);
        }
      }
      for (k = 0, len1 = e.length; k < len1; k++) {
        element = e[k];
        if (i.indexOf(element) === -1) {
          result.extra.push(element);
        }
      }
      return result;
    },
    makeArray: function(hash, key) {
      hash[key] = [hash[key]];
      return hash;
    }
  };

}).call(this);
