// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var construct, requireSafe;

  requireSafe = require('./require_safe');

  construct = require('./construct');

  module.exports = {
    addOutsideModules: function(codeModules, params) {
      var name, path, ref;
      if (!(params.outside && typeof params.outside === 'object')) {
        return codeModules;
      }
      ref = params.outside;
      for (name in ref) {
        path = ref[name];
        if (codeModules[name] == null) {
          codeModules[name] = path;
        }
      }
      return codeModules;
    },
    attachDDHelper: function(helper) {
      var Helper;
      if (!(helper && typeof helper === 'object')) {
        return false;
      }
      if (typeof helper.path !== 'string') {
        return false;
      }
      if (!Array.isArray(helper.initial)) {
        return false;
      }
      Helper = requireSafe(helper.path);
      if (typeof Helper !== 'function') {
        return false;
      }
      return construct(Helper, helper.initial);
    },
    filterHash: function(hash, keys) {
      var filtered, i, key, len;
      filtered = {};
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        if (hash[key] != null) {
          filtered[key] = hash[key];
        }
      }
      return filtered;
    },
    getFilteredList: function(filesHash, params) {
      var list;
      list = Object.keys(filesHash);
      if (!(params && typeof params === 'object')) {
        return list;
      }
      if (params.only) {
        return Object.keys(this.filterHash(filesHash, params.only));
      }
      if (!params.except) {
        return list;
      }
      return list = list.filter(function(name) {
        return params.except.indexOf(name) === -1;
      });
    },
    mergeHashes: function(lo, hi) {
      var key, value;
      for (key in hi) {
        value = hi[key];
        lo[key] = value;
      }
      return lo;
    },
    parseSharedSpecs: function(filesHash, params) {
      var i, j, len, len1, module, moduleName, moduleNames, ref, sharedSpecFolder, sharingModules, specPaths;
      moduleNames = Object.keys(filesHash);
      specPaths = {};
      for (i = 0, len = moduleNames.length; i < len; i++) {
        moduleName = moduleNames[i];
        specPaths[moduleName] = params.spec + "/" + moduleName;
      }
      if (!(params.shareSpecs && typeof params.shareSpecs === 'object')) {
        return specPaths;
      }
      ref = params.shareSpecs;
      for (sharedSpecFolder in ref) {
        sharingModules = ref[sharedSpecFolder];
        for (j = 0, len1 = sharingModules.length; j < len1; j++) {
          module = sharingModules[j];
          if (typeof specPaths[module] === 'string') {
            specPaths[module] = params.spec + "/" + sharedSpecFolder;
          }
        }
      }
      return specPaths;
    },
    requireMatchers: function(pathsArray) {
      var i, len, matcher, matcherPath, matchers;
      matchers = {};
      for (i = 0, len = pathsArray.length; i < len; i++) {
        matcherPath = pathsArray[i];
        matcher = requireSafe(matcherPath);
        if (matcher) {
          this.mergeHashes(matchers, matcher);
        }
      }
      return matchers;
    }
  };

}).call(this);
