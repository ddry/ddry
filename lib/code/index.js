// Generated by CoffeeScript 2.4.1
(function() {
  /*
   * Code module processing core
   */
  'use strict';
  var errorReport, errors, modular, requireSafe, types;

  errors = require('./errors');

  errorReport = require('../common/error_report');

  modular = require('../modular');

  requireSafe = require('../fs/require_safe');

  types = require('./types');

  module.exports = {
    load: function(dd, title, specs) {
      var code, params;
      params = types.parseTitle(title, dd.path);
      code = requireSafe(params);
      delete dd.methodName;
      if (!code) {
        delete dd.path;
        delete dd.that;
        return false;
      }
      dd.path = params.path;
      dd.title = params.title;
      dd.use = params.use;
      dd.titles[dd.path] = params.title;
      dd.specs[dd.path] = {};
      this.processModuleType(dd, params, code);
      if (typeof specs === 'string') {
        modular.loadModuleSpecFolder(dd, params, specs);
        return false;
      }
      return params;
    },
    processModuleType: function(dd, params, code) {
      var moduleType;
      moduleType = types.get(params, code);
      return types[`process${moduleType}`](dd, params, code);
    },
    setMethod: function(dd, name, specs) {
      var code, instances;
      instances = dd.instances();
      code = Object.keys(instances).length ? instances : dd.that;
      if (errorReport.toTestEngine(errors, [dd.title, code, name, dd.use])) {
        return false;
      }
      if (typeof specs === 'string') {
        specs = requireSafe({
          title: `${name}() of ${dd.title}`,
          path: specs
        });
        if (!specs) {
          return false;
        }
      }
      dd.specs[dd.path][name] = specs;
      types.setMethodName(dd, name);
      return specs;
    }
  };

}).call(this);
