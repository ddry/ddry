// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var object;

  object = require('../common/object');

  module.exports = {
    codeModule: function() {
      var codeModule, name, path, ref;
      codeModule = this.item.replace(/\.js$/, '');
      ref = this.modulePaths;
      for (name in ref) {
        path = ref[name];
        if (codeModule === path) {
          return name;
        }
      }
      return false;
    },
    detect: function(item, config, modulePaths, methodPaths, specPath) {
      var codeModule, folder, method;
      this.item = item;
      this.config = config;
      this.modulePaths = modulePaths;
      this.methodPaths = methodPaths;
      this.specPath = specPath;
      method = this.method();
      if (method) {
        return method;
      }
      codeModule = this.codeModule();
      if (codeModule) {
        return codeModule;
      }
      folder = this.folder();
      if (folder) {
        return folder;
      }
      return false;
    },
    folder: function() {
      var folder, name, outside, path, ref;
      if (this.specPath.test(this.item)) {
        folder = this.item.replace(this.specPath, '');
        return folder.replace(/\/$/, '');
      }
      outside = new RegExp("^" + this.item);
      ref = this.modulePaths;
      for (name in ref) {
        path = ref[name];
        if (outside.test(path)) {
          folder = path.replace(outside, '');
          folder = folder.split('/').join('.');
          folder = name.replace("." + folder, '');
          return folder;
        }
      }
      return false;
    },
    key: function(mode, detect) {
      var _, key;
      if (Array.isArray(detect)) {
        key = {
          key: "methods." + detect[0] + "." + mode,
          value: [detect[1]]
        };
        return key;
      }
      return _ = {
        key: mode,
        value: [detect]
      };
    },
    oe: function(params) {
      var _, exceptIndex, oe, oneMode, onlyIndex;
      onlyIndex = params.indexOf('-o');
      exceptIndex = params.indexOf('-e');
      oneMode = params.slice(1);
      if (exceptIndex === -1) {
        return {
          only: oneMode
        };
      }
      if (onlyIndex === -1) {
        return {
          except: oneMode
        };
      }
      oe = onlyIndex < exceptIndex;
      return _ = {
        only: oe ? params.slice(onlyIndex + 1, exceptIndex) : params.slice(onlyIndex + 1),
        except: oe ? params.slice(exceptIndex + 1) : params.slice(exceptIndex + 1, onlyIndex)
      };
    },
    method: function() {
      var codeModule, method;
      if (!this.specPath.test(this.item)) {
        return false;
      }
      method = this.item.replace(this.specPath, '');
      method = method.replace(/\.js$/, '');
      method = method.split('/').join('.');
      method = method.replace(/\.$/, '');
      codeModule = object.match(method, this.methodPaths, true, true);
      if (!codeModule) {
        return false;
      }
      if (!method.replace("" + codeModule, '').length) {
        return codeModule;
      }
      method = method.replace(codeModule + ".", '');
      return [codeModule, method];
    }
  };

}).call(this);
