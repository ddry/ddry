// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var data, detect;

  data = require('./data');

  detect = require('./detect');

  module.exports = {
    mochaMethods: ['xit', 'xspecify', 'it', 'specify'],
    addSharedKeys: function(specParams, specSetParams) {
      var key, ref, value;
      if (!Object.keys(specSetParams.sharedSpecKeys).length) {
        return;
      }
      ref = specSetParams.sharedSpecKeys;
      for (key in ref) {
        value = ref[key];
        specParams[key] = value;
      }
      return specParams;
    },
    applyMochaMethod: function(spec, specParams) {
      var paramsMethod, pendingMessage, specMessage;
      paramsMethod = this.getMochaMethod(specParams);
      if (paramsMethod) {
        pendingMessage = this.getPendingMessage(specParams[paramsMethod]);
        specMessage = spec[this.getMochaMethod(spec)];
        spec[paramsMethod] = this.setSpecMessage(pendingMessage, specMessage);
      }
      return specParams.mochaMethod = this.getMochaMethod(spec);
    },
    collect: function(spec, specSetParams) {
      var ref, specParams;
      if (!detect.single(spec) && !detect.sequence(spec)) {
        specSetParams.sharedSpecKeys = spec;
        return [];
      }
      specParams = {
        matcher: (ref = spec.matcher) != null ? ref : 'default'
      };
      this.addSharedKeys(specParams, specSetParams);
      this.applyMochaMethod(spec, specParams);
      if (spec.before) {
        specParams.before = spec.before;
      }
      if (spec.after) {
        specParams.after = spec.after;
      }
      return data.process(spec, specParams);
    },
    getMochaMethod: function(spec) {
      var j, keys, len, mochaMethod, ref;
      keys = Object.keys(spec);
      ref = this.mochaMethods;
      for (j = 0, len = ref.length; j < len; j++) {
        mochaMethod = ref[j];
        if (keys.indexOf(mochaMethod) !== -1) {
          return mochaMethod;
        }
      }
      return false;
    },
    getPendingMessage: function(message) {
      if (typeof message !== 'string') {
        return 'pending';
      }
      if (!message.length) {
        return 'pending';
      }
      return message;
    },
    setSpecMessage: function(pending, spec) {
      if (typeof spec === 'string') {
        return pending + ": " + spec;
      }
      return function(i, e) {
        return pending + ": " + (spec(i, e));
      };
    }
  };

}).call(this);
