// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  var Clone;

  Clone = require('../../clone');

  module.exports = {
    containsObjects: function(value) {
      var element, i, len;
      for (i = 0, len = value.length; i < len; i++) {
        element = value[i];
        if (element && typeof element === 'object') {
          return true;
        }
        if (typeof element === 'function') {
          return true;
        }
      }
      return false;
    },
    create: function(object, baseKey, report, raw) {
      var key, value;
      if (baseKey == null) {
        baseKey = [];
      }
      if (report == null) {
        report = [];
      }
      if (raw == null) {
        raw = false;
      }
      for (key in object) {
        value = object[key];
        if (this.validObject(value)) {
          report = this.create(value, baseKey.concat([key]), report, raw);
        } else {
          report.push(this.reportValue(value, baseKey.concat([key]).join('.'), raw));
        }
      }
      return report;
    },
    format: function(value) {
      var definition;
      if (typeof value === 'function') {
        definition = ("" + value).replace(/ /g, '');
        return definition.replace(/__cov_[^\+]*\+\+;/g, '');
      }
      if (Array.isArray(value)) {
        return value;
      }
      return "" + value;
    },
    extend: function(lo, hi, clone) {
      var key, value;
      if (clone == null) {
        clone = false;
      }
      for (key in hi) {
        value = hi[key];
        lo[key] = value;
      }
      if (!clone) {
        return lo;
      }
      return new Clone(lo);
    },
    reportValue: function(value, key, raw) {
      var _, obj;
      if (!raw) {
        return key + ": " + (this.format(value));
      }
      return _ = (
        obj = {},
        obj["" + key] = value,
        obj
      );
    },
    validObject: function(value) {
      if (!(value && typeof value === 'object')) {
        return false;
      }
      if (Array.isArray(value)) {
        if (!this.containsObjects(value)) {
          return false;
        }
      }
      if (!Object.keys(value).length) {
        return false;
      }
      return true;
    }
  };

}).call(this);
