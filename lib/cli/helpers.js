// Generated by CoffeeScript 1.12.3

/*
 * Command line interface helpers
 */

(function() {
  'use strict';
  var attach, c, cliScope, error, folder, fs, object, path,
    slice = [].slice;

  attach = require('../modular/attach');

  c = require('../common/colors');

  cliScope = require('./scope');

  folder = require('../fs/folder');

  fs = require('fs');

  object = require('../common/object');

  path = require('path');

  error = require('./error');

  module.exports = {
    cliScope: function(params) {
      var cli, config, constraint, constraints, detect, i, item, items, len, methodPaths, mode, modulePaths, scope, specPath;
      scope = cliScope.oe(params);
      cli = this.load(true);
      modulePaths = cli.modulePaths;
      methodPaths = object.toArray(modulePaths);
      config = this.load();
      config = {
        code: config.code,
        spec: config.spec
      };
      specPath = new RegExp("^" + config.spec + "/");
      constraints = {};
      for (mode in scope) {
        items = scope[mode];
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          detect = cliScope.detect(item, config, modulePaths, methodPaths, specPath);
          if (detect) {
            constraint = cliScope.key(mode, detect);
            object.insertKey(constraints, constraint.key, constraint.value);
          }
        }
      }
      cli.constraints = constraints;
      return this.save(cli, true);
    },
    exit: function() {
      var cli, configPresent;
      configPresent = fs.existsSync(path.join('ddry.json'));
      if (configPresent) {
        console.log("Running spec with unchanged " + (c.bright('ddry.json')));
        cli = this.load(true);
        delete cli.constraints;
        this.save(cli, true);
        return true;
      }
      return error("No spec config file (" + (c.bright('ddry.json')) + ") found. Run 'ddry init' to create it first.");
    },
    fetchConfig: function(args) {
      var config, configFunction, configPath, params;
      config = this.load();
      configPath = args[0], params = 2 <= args.length ? slice.call(args, 1) : [];
      configPath = "" + process.env.DDRY_PREFIX + configPath;
      configFunction = this.fetchConfigFunction(configPath);
      if (configFunction) {
        return [config, configPath, params];
      }
      if (typeof config.cli.config.path !== 'string') {
        error("Failed to load config function file from " + (c.bright(configPath)));
      }
      configPath = config.cli.config.path;
      configFunction = this.fetchConfigFunction(configPath);
      if (!configFunction) {
        error("Failed to load config function file from " + (c.bright(configPath)));
      }
      params = 1 <= args.length ? slice.call(args, 0) : [];
      return [config, configPath, params];
    },
    fetchConfigFunction: function(path) {
      var configFunction, e;
      try {
        configFunction = require.resolve(path);
      } catch (error1) {
        e = error1;
        configFunction = false;
      }
      return configFunction;
    },
    getConfigFunction: function(path) {
      return require(path);
    },
    getModuleTitles: function(filesHash) {
      var filePath, name, titles;
      titles = {};
      for (name in filesHash) {
        filePath = filesHash[name];
        titles[name] = this.getModuleTitle(filePath);
      }
      return titles;
    },
    getModuleTitle: function(filePath) {
      var file, title;
      file = fs.readFileSync(path.join(filePath + ".js"), 'utf-8');
      title = file.match(/\/\*\s*\*\s*([^*]*?)\s*\*/);
      if (Array.isArray(title)) {
        title = title[1];
        console.log("Extracted " + (c.green(title)) + " from " + (c.bright(filePath)));
        return title;
      }
      console.log("No title defined in " + (c.bright(filePath)));
      return filePath;
    },
    load: function(commandLine) {
      var config, e, filename;
      if (commandLine == null) {
        commandLine = false;
      }
      filename = commandLine ? process.env.DDRY_CLI + "on" : 'ddry.json';
      try {
        config = fs.readFileSync(path.join(filename), 'utf-8');
        config = JSON.parse(config);
      } catch (error1) {
        e = error1;
        config = {};
      }
      return config;
    },
    moduleTitles: function(config) {
      var filesHash, moduleTitles, name, title, titles;
      filesHash = folder.read('', config.code, true);
      filesHash = attach.outside(filesHash, config);
      this.save({
        modulePaths: filesHash
      }, true);
      titles = this.getModuleTitles(filesHash);
      moduleTitles = {};
      for (name in titles) {
        title = titles[name];
        moduleTitles = object.insertKey(moduleTitles, name, title);
      }
      return moduleTitles;
    },
    save: function(configObject, commandLine) {
      var filename, json;
      if (commandLine == null) {
        commandLine = false;
      }
      filename = commandLine ? process.env.DDRY_CLI + "on" : 'ddry.json';
      json = JSON.stringify(configObject, null, 2);
      filename = path.join(filename);
      fs.writeFileSync(filename, json, 'utf-8');
      return console.log("ddry spec configuration saved in " + (c.bright(filename)));
    },
    serveSpec: function(constraints) {
      var config, configFunction, modular, moduleTitles, spec;
      config = this.load();
      modular = config.cli.ddry || 'ddry/modular';
      spec = require(modular)();
      if (config.cli.prefix) {
        spec.setPrefix(config.cli.prefix);
      }
      if (config.cli.config && typeof config.cli.config === 'object') {
        moduleTitles = config.moduleTitles;
        configFunction = this.getConfigFunction(config.cli.config.path);
        config = configFunction.apply(configFunction, config.cli.config.params);
        config.moduleTitles = moduleTitles;
      }
      if (constraints && typeof constraints === 'object') {
        config = object.merge(config, constraints);
      }
      return spec.apply(config);
    },
    setPrefix: function() {
      var level, npmRoot;
      if (typeof process.env.DDRY_DEV === 'string') {
        process.env.DDRY_PREFIX = '../../';
        return true;
      }
      npmRoot = process.env.NPM_ROOT.replace(process.env.PWD, '');
      level = npmRoot.split('/').length + 4;
      process.env.DDRY_PREFIX = Array(level).join('../');
      return true;
    },
    stripSlash: function(dirName) {
      return dirName.replace(/\/$/, '');
    }
  };

}).call(this);
