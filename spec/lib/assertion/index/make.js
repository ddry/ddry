// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  module.exports = function(dd) {
    var specSet;
    specSet = {
      code: dd.helper.examples.numbering,
      harness: 'mocha',
      instanceNames: {},
      instancesList: {},
      matchers: dd.helper.requireSafe('lib/matchers'),
      methodName: 'ordinal',
      sharedSpecKeys: {},
      specs: [],
      tapContext: null,
      use: false
    };
    dd.context('With Mocha as harness', function() {
      return dd.drive([
        {
          it: 'makes assertion without hooks',
          i: [
            {
              matcher: 'default',
              it: 'returns 1st for 1',
              input: [1],
              expected: '1st'
            }, specSet
          ],
          e: true
        }, {
          it: 'makes assertion with hooks',
          i: [
            {
              before: function() {
                return this.property = 'values';
              },
              matcher: 'default',
              it: 'returns 1st for 1',
              input: [1],
              expected: '1st',
              after: function() {
                return delete this.property;
              }
            }, specSet
          ],
          e: true
        }
      ]);
    });
    dd.context('With Tap as harness', function() {
      var tapSpecSet;
      tapSpecSet = dd.helper.extend(specSet, {
        harness: 'tap'
      });
      return dd.drive([
        {
          it: 'makes assertion without hooks',
          i: [
            {
              matcher: 'default',
              it: 'returns 1st for 1',
              input: [1],
              expected: '1st'
            }, tapSpecSet
          ],
          e: true
        }, {
          it: 'makes assertion with hooks',
          i: [
            {
              before: function() {
                return this.property = 'values';
              },
              matcher: 'default',
              it: 'returns 1st for 1',
              input: [1],
              expected: '1st',
              after: function() {
                return delete this.property;
              }
            }, tapSpecSet
          ],
          e: true
        }
      ]);
    });
    return dd.context('With Tape as harness', function() {
      var tapeSpecSet;
      tapeSpecSet = dd.helper.extend(specSet, {
        harness: 'tape'
      });
      return dd.drive([
        {
          it: 'makes assertion without hooks',
          i: [
            {
              matcher: 'default',
              it: 'returns 1st for 1',
              input: [1],
              expected: '1st'
            }, tapeSpecSet
          ],
          e: true
        }, {
          it: 'makes assertion with hooks',
          i: [
            {
              before: function() {
                return this.property = 'values';
              },
              matcher: 'default',
              it: 'returns 1st for 1',
              input: [1],
              expected: '1st',
              after: function() {
                return delete this.property;
              }
            }, tapeSpecSet
          ],
          e: true
        }
      ]);
    });
  };

}).call(this);
