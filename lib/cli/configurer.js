// Generated by CoffeeScript 1.12.3

/*
 * Command line interface helpers
 */

(function() {
  'use strict';
  var io, log, object,
    slice = [].slice;

  io = require('./io');

  object = require('../common/object');

  log = require('./log');

  module.exports = {
    load: io.load,
    explainOmitting: function(config, givenConfigurerPath) {
      if (this.stored(config) && typeof config.cli.config.path === 'string') {
        return true;
      }
      if (typeof givenConfigurerPath === 'string') {
        log.error('configurerMissing', givenConfigurerPath);
      }
      return log.error('configurerUndefined');
    },
    fetch: function(args) {
      var config, configurer, configurerPath, givenConfigurerPath, params;
      config = io.load();
      givenConfigurerPath = args[0], params = 2 <= args.length ? slice.call(args, 1) : [];
      configurerPath = "" + process.env.DDRY_PREFIX + givenConfigurerPath;
      configurer = this.fetchModule(configurerPath);
      if (configurer) {
        return [config, configurerPath, params];
      }
      this.explainOmitting(config, givenConfigurerPath);
      configurerPath = config.cli.config.path;
      configurer = this.fetchModule(configurerPath);
      if (!configurer) {
        log.error('configurerMissing', configurerPath);
      }
      params = 1 <= args.length ? slice.call(args, 0) : [];
      return [config, configurerPath, params];
    },
    fetchModular: function(config) {
      if (!object.isObject(config)) {
        return 'ddry/modular';
      }
      if (!object.isObject(config.cli)) {
        return 'ddry/modular';
      }
      return config.cli.ddry || 'ddry/modular';
    },
    fetchModule: function(path) {
      var configurer, e;
      try {
        configurer = require.resolve(path);
      } catch (error) {
        e = error;
        configurer = false;
      }
      return configurer;
    },
    serveSpec: function(constraints, preventLoop) {
      var config, configurer, loadedConfig, modular, savedConfig, spec;
      if (preventLoop == null) {
        preventLoop = false;
      }
      config = io.load();
      modular = this.fetchModular(config);
      spec = require(modular)();
      if (config.cli.prefix) {
        spec.setPrefix(config.cli.prefix);
      }
      if (this.stored(config)) {
        savedConfig = config;
        configurer = require(config.cli.config.path);
        loadedConfig = configurer.apply(configurer, config.cli.config.params);
        config = object.merge(savedConfig, loadedConfig);
      }
      if (constraints && typeof constraints === 'object') {
        config = object.merge(config, constraints);
      }
      if (!preventLoop) {
        spec.apply(config);
      }
      return true;
    },
    stored: function(config) {
      if (!(config.cli && typeof config.cli === 'object')) {
        return false;
      }
      if (!(config.cli.config && typeof config.cli.config === 'object')) {
        return false;
      }
      return true;
    },
    stripSlash: function(dirName) {
      return dirName.replace(/\/$/, '');
    }
  };

}).call(this);
