// Generated by CoffeeScript 1.12.3

/*
 * Command line interface helpers
 */

(function() {
  'use strict';
  var attach, c, error, folder, fs, object, path;

  attach = require('../modular/attach');

  c = require('../common/colors');

  folder = require('../fs/folder');

  fs = require('fs');

  object = require('../common/object');

  path = require('path');

  error = require('./error');

  module.exports = {
    exit: function() {
      var configPresent;
      configPresent = fs.existsSync(path.join('ddry.json'));
      if (configPresent) {
        console.log("Running spec with unchanged " + (c.bright('ddry.json')));
        return true;
      }
      return error("No spec config file (" + (c.bright('ddry.json')) + ") found. Run 'ddry init' to create it first.");
    },
    getModuleTitles: function(filesHash) {
      var filePath, name, titles;
      titles = {};
      for (name in filesHash) {
        filePath = filesHash[name];
        titles[name] = this.getModuleTitle(filePath);
      }
      return titles;
    },
    getModuleTitle: function(filePath) {
      var file, title;
      file = fs.readFileSync(path.join(filePath + ".js"), 'utf-8');
      title = file.match(/\/\*\s*\*\s*([^*]*?)\s*\*/);
      if (Array.isArray(title)) {
        title = title[1];
        console.log("Extracted " + (c.green(title)) + " from " + (c.bright(filePath)));
        return title;
      }
      console.log("No title defined in " + (c.bright(filePath)));
      return filePath;
    },
    outputConfig: function(filename, configObject) {
      var json;
      json = JSON.stringify(configObject, null, 2);
      filename = path.join(filename);
      fs.writeFileSync(filename, json, 'utf-8');
      return console.log("ddry spec configuration saved in " + (c.bright(filename)));
    },
    moduleTitles: function(code, config) {
      var filesHash, moduleTitles, name, title, titles;
      if (config == null) {
        config = {};
      }
      filesHash = folder.read('', code, true);
      filesHash = attach.outside(filesHash, config);
      titles = this.getModuleTitles(filesHash);
      moduleTitles = {};
      for (name in titles) {
        title = titles[name];
        moduleTitles = object.insertKey(moduleTitles, name, title);
      }
      return moduleTitles;
    },
    setPrefix: function() {
      var level, npmRoot;
      if (typeof process.env.DDRY_DEV === 'string') {
        process.env.DDRY_PREFIX = '../../';
        return true;
      }
      npmRoot = process.env.NPM_ROOT.replace(process.env.PWD, '');
      level = npmRoot.split('/').length + 4;
      process.env.DDRY_PREFIX = Array(level).join('../');
      return true;
    },
    stripSlash: function(dirName) {
      return dirName.replace(/\/$/, '');
    }
  };

}).call(this);
