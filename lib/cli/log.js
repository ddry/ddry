// Generated by CoffeeScript 1.12.3

/*
 * Command line interface logger
 */

(function() {
  'use strict';
  var c, usage;

  c = require('../common/colors');

  usage = require('./usage');

  module.exports = {
    errors: {
      configurerMissing: function(path) {
        return "Failed to load configurer file from " + (c.bright(path));
      },
      configurerUndefined: function() {
        return "In order to omit configurer path please specify it at least once.";
      },
      empty: function() {
        return '';
      },
      noCodeFolder: function(code) {
        return "Specified code folder " + (c.bright(code)) + " does not exist.";
      },
      noConfigFound: function() {
        return "No spec config file (" + (c.bright('ddry.json')) + ") found. Run 'ddry init' to create it first.";
      },
      usage: function(command) {
        return usage[command];
      }
    },
    messages: {
      configured: function(p) {
        return "Config object generated by " + (c.bright(p.path)) + " for '" + p.params + "'";
      },
      configSaved: function(filename) {
        return (c.ddry()) + " spec configuration saved in " + (c.bright(filename));
      },
      empty: function() {
        return '';
      },
      noTitle: function(filePath) {
        return "No title defined in " + (c.bright(filePath));
      },
      titleExtracted: function(p) {
        return "Extracted " + (c.green(p.title)) + " from " + (c.bright(p.filePath));
      },
      unscoped: function() {
        return "Running spec with unscoped " + (c.bright('ddry.json'));
      }
    },
    error: function(alias, param, calm) {
      var badge;
      if (calm == null) {
        calm = false;
      }
      badge = calm ? '' : c.red('ERROR:');
      throw new Error(badge + " " + (this.errors[alias](param)));
    },
    info: function(alias, param, mockUnmute) {
      var mute;
      if (mockUnmute == null) {
        mockUnmute = false;
      }
      mute = mockUnmute ? false : typeof process.env.MUTE_CONSOLE === 'string';
      if (mute) {
        return "" + (this.messages[alias](param));
      }
      console.log("" + (this.messages[alias](param)));
      return "" + (this.messages[alias](param));
    }
  };

}).call(this);
