// Generated by CoffeeScript 2.4.1
(function() {
  /*
   * Command line interface kernel
   */
  'use strict';
  var c, commands, constraints, groups, io, log, object, titles;

  c = require('../common/colors');

  commands = require('./commands');

  constraints = require('./constraints');

  log = require('./log');

  io = require('./io');

  object = require('../common/object');

  titles = require('./titles');

  groups = {
    noGet: ['init', 'config'],
    noSet: ['usage'],
    titles: ['init', 'config', 'titles']
  };

  module.exports = {
    cliScope: function(params) {
      var cli, scope;
      scope = constraints.oe(params);
      cli = io.load(true);
      cli.constraints = constraints.render(scope);
      io.save(cli, true);
      return true;
    },
    getConfig: function(command) {
      if (groups.noGet.indexOf(command) !== -1) {
        return {};
      }
      return io.load();
    },
    getTitles: function(config, command) {
      if (groups.titles.indexOf(command) === -1) {
        return config;
      }
      config.moduleTitles = titles.get(config);
      return config;
    },
    exit: function(mockNoConfig = false) {
      var cli, configPresent;
      configPresent = mockNoConfig ? false : io.configPresent();
      if (configPresent) {
        log.info('unscoped');
        cli = io.load(true);
        delete cli.constraints;
        io.save(cli, true);
        return true;
      }
      return log.error('noConfigFound');
    },
    process: function(command, params) {
      var config;
      config = this.getConfig(command);
      params.unshift(config);
      return this.setConfig(command, params);
    },
    setConfig: function(command, params) {
      var config;
      config = commands[command].apply(commands, params);
      config = this.getTitles(config, command);
      if (groups.noSet.indexOf(command) === -1) {
        io.save(config);
        return true;
      }
    },
    setPrefix: function(dev, npmRoot = 'node_modules') {
      var level;
      if (typeof dev === 'string') {
        return '../../';
      }
      npmRoot = npmRoot.replace(process.env.PWD, '');
      level = npmRoot.split('/').length + 4;
      return Array(level).join('../');
    }
  };

}).call(this);
