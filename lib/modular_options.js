// Generated by CoffeeScript 1.12.3
(function() {
  'use strict';
  module.exports = {
    collect: function(params, moduleName, moduleParams, options) {
      var i, len, option;
      this.params = params;
      this.moduleName = moduleName;
      this.moduleParams = moduleParams;
      for (i = 0, len = options.length; i < len; i++) {
        option = options[i];
        this.parse(option);
      }
      return this.moduleParams;
    },
    get: function(option) {
      var cursor, i, len, node, xPath;
      xPath = this.moduleName.split('.');
      xPath.unshift(option);
      cursor = this.params;
      for (i = 0, len = xPath.length; i < len; i++) {
        node = xPath[i];
        if (typeof cursor[node] === 'undefined') {
          return false;
        }
        cursor = cursor[node];
      }
      return cursor;
    },
    getSet: function(option) {
      if (!Array.isArray(this.params[option])) {
        return false;
      }
      return this.params[option].indexOf(this.moduleName) !== -1;
    },
    parse: function(option) {
      if (Array.isArray(option)) {
        return this.parseSet(option);
      }
      return this.parseSingle(option);
    },
    parseRequired: function(option, required) {
      if (option) {
        return option;
      }
      if (required) {
        return this.moduleName;
      }
      return option;
    },
    parseSet: function(options) {
      var i, len, option;
      for (i = 0, len = options.length; i < len; i++) {
        option = options[i];
        this.moduleParams[option] = this.getSet(option);
      }
      return true;
    },
    parseSingle: function(option) {
      var optionName, paramsKey, paramsOption, required;
      option = option.split(':');
      paramsKey = option[0], optionName = option[option.length - 1];
      paramsOption = this.get(option);
      required = option.length > 1;
      paramsOption = this.parseRequired(paramsOption, required);
      if (paramsOption) {
        return this.moduleParams[paramsKey] = paramsOption;
      }
    }
  };

}).call(this);
