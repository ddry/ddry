// Generated by CoffeeScript 1.12.3

/*
 * ddry core
 */

(function() {
  'use strict';
  var DataDriven, codeModule, extend, harness, matchers, modular;

  codeModule = require('./lib/code');

  harness = require('./lib/common/harness');

  extend = require('./lib/common/object').extend;

  matchers = require('./lib/matchers');

  modular = require('./lib/modular');

  DataDriven = function(path) {
    this.constructors = {};
    this.driverFactories = {};
    this.drivers = {};
    this.generators = {};
    this.harness = harness.detect();
    this.instancesList = {};
    this.instanceNames = {};
    this.matchers = extend({}, matchers);
    this.modules = {};
    this.specs = {};
    this.specNames = {};
    this.titles = {};
    this.use = false;
    return this.path = path;
  };

  DataDriven.prototype.muteOutput = function() {
    return modular.muteOutput();
  };

  DataDriven.prototype.modular = function(params) {
    var i, len, module, modules, that;
    this.modularTitle = params.title || 'Modular spec';
    modular.addCustomMatchers(this, params);
    modular.attachHelper(this, params);
    modules = modular.parseModular(this, params);
    that = this;
    modular.setContext(this.harness, 'modular', this.modularTitle);
    for (i = 0, len = modules.length; i < len; i++) {
      module = modules[i];
      params = [that].concat(codeModule.load.apply(codeModule, module));
      modular.describeModule.apply(codeModule, params);
    }
    return modular.processModular(this);
  };

  DataDriven.prototype.module = function(title, specs) {
    var params;
    params = codeModule.load(this, title, specs);
    return modular.describeModule(this, params, specs);
  };

  DataDriven.prototype.instances = function() {
    var instances;
    instances = this.instancesList[this.path];
    if (!(instances && typeof instances === 'object')) {
      return {};
    }
    return this.instancesList[this.path];
  };

  DataDriven.prototype.method = function(name, specs) {
    specs = codeModule.setMethod(this, name, specs);
    return modular.describeMethod(this, name, specs);
  };

  DataDriven.prototype.ry = function(context, data, spec) {
    var _, that;
    if (context && typeof context === 'object') {
      that = this;
      for (_ in context) {
        spec = context[_];
        that.ry(spec.context, [spec], function(spec) {
          return that.drive({
            it: spec.it,
            i: spec.i,
            e: spec.e
          });
        });
      }
      return true;
    }
    if (context) {
      that = this;
      that.context(context, modular.applyContext(that, spec, data));
      return true;
    }
    spec.apply(this.that, data);
    return true;
  };

  DataDriven.prototype.context = function(title, specs) {
    return modular.setContext(this.harness, 'context', title, specs);
  };

  DataDriven.prototype.drive = function(spec) {
    var generator;
    generator = this.generators[this.path];
    if (typeof this.methodName !== 'boolean') {
      generator = generator[this.methodName];
    }
    generator.init(spec);
    return true;
  };

  DataDriven.prototype.pending = function() {
    var name;
    name = this.methodName || this.specName;
    return {
      matcher: 'plain',
      xit: "pending: " + this.titles[this.path] + ": " + name + "()",
      i: 1,
      e: 1
    };
  };

  module.exports = DataDriven;

}).call(this);
