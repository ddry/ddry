// Generated by CoffeeScript 1.12.3

/*
 * Command line interface commands
 */

(function() {
  'use strict';
  var c, error, folder, helpers, object,
    slice = [].slice;

  c = require('../common/colors');

  error = require('./error');

  helpers = require('./helpers');

  folder = require('../fs/folder');

  object = require('../common/object');

  module.exports = {
    exit: helpers.exit,
    setPrefix: helpers.setPrefix,
    config: function() {
      var config, configFunction, configPath, params;
      configPath = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      configFunction = require("" + process.env.DDRY_PREFIX + configPath);
      config = configFunction.apply(configFunction, params);
      config.moduleTitles = helpers.moduleTitles(config.code, config);
      return helpers.outputConfig('ddry.json', config);
    },
    init: function(code, spec, title) {
      var config;
      code = helpers.stripSlash(code);
      if (!folder.isFolder(code)) {
        return error("Specified code folder {c.bright code} does not exist.");
      }
      spec = helpers.stripSlash(spec);
      config = {
        title: title || code,
        code: code,
        spec: spec
      };
      config.moduleTitles = helpers.moduleTitles(code);
      return helpers.outputConfig('ddry.json', config);
    },
    titles: function(code, outside) {
      var codeModules, moduleTitles, name, title, titles;
      if (outside == null) {
        outside = {};
      }
      codeModules = folder.read('', code, true);
      titles = helpers.getModuleTitles(codeModules);
      moduleTitles = {};
      for (name in titles) {
        title = titles[name];
        moduleTitles = object.insertKey(moduleTitles, name, title);
      }
      return moduleTitles;
    }
  };

}).call(this);
